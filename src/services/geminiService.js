import { GoogleGenerativeAI } from '@google/generative-ai';

class GeminiService {
  constructor() {
    // Inicializar o cliente Gemini com a chave da API
    const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
    
    if (!apiKey) {
      console.error('‚ö†Ô∏è Chave da API do Gemini n√£o configurada!');
      console.log('üìù Configure a chave em .env.local:');
      console.log('   NEXT_PUBLIC_GEMINI_API_KEY=sua_chave_aqui');
      console.log('üîó Obtenha sua chave em: https://aistudio.google.com/app/apikey');
      this.genAI = null;
      return;
    }

    this.genAI = new GoogleGenerativeAI(apiKey);
    this.model = this.genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
  }

  async gerarRelatorioEducacional(dadosAluno, template, detalhesPersonalizados = '') {
    if (!this.genAI) {
      throw new Error('Servi√ßo Gemini n√£o est√° configurado. Configure a chave da API.');
    }

    try {
      // Construir prompt especializado para relat√≥rios educacionais
      const prompt = this.construirPromptEducacional(dadosAluno, template, detalhesPersonalizados);
      
      console.log('ü§ñ Enviando prompt para Gemini AI...');
      
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const texto = response.text();

      console.log('‚úÖ Relat√≥rio gerado com sucesso pela IA!');
      
      return {
        sucesso: true,
        relatorio: texto,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Erro ao gerar relat√≥rio com Gemini:', error);
      
      // Retornar erro detalhado
      return {
        sucesso: false,
        erro: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  construirPromptEducacional(dadosAluno, template, detalhesPersonalizados) {
    const promptBase = `
Voc√™ √© uma assistente pedag√≥gica especializada em relat√≥rios educacionais brasileiros, com conhecimento da BNCC (Base Nacional Comum Curricular).

CONTEXTO DO ALUNO:
- Nome: ${dadosAluno.nome}
- Turma: ${dadosAluno.turma}
- Idade/Data de nascimento: ${dadosAluno.dataNascimento || 'N√£o informado'}
- Professor(a) respons√°vel: ${dadosAluno.professor}

TIPO DE RELAT√ìRIO SOLICITADO:
${template.nome} - ${template.descricao}

DIRETRIZES ESPEC√çFICAS:
${template.prompt}

OBSERVA√á√ïES ESPEC√çFICAS DO PROFESSOR:
${detalhesPersonalizados || 'Nenhuma observa√ß√£o espec√≠fica fornecida.'}

INSTRU√á√ïES PARA GERA√á√ÉO:
1. Gere um relat√≥rio pedag√≥gico profissional de 300-400 palavras
2. Use linguagem t√©cnica educacional apropriada
3. Seja espec√≠fico e construtivo
4. Inclua as observa√ß√µes do professor de forma natural no texto
5. Alinhado com as compet√™ncias da BNCC
6. Estruture em se√ß√µes claras
7. Conclua com sugest√µes pr√°ticas de desenvolvimento

FORMATO DE SA√çDA:
- Use formata√ß√£o em Markdown
- Inclua cabe√ßalho com dados do aluno
- Organize em se√ß√µes bem definidas
- Seja objetivo e profissional

Gere o relat√≥rio agora:`;

    return promptBase;
  }

  // M√©todo para testar a conex√£o com a API
  async testarConexao() {
    if (!this.genAI) {
      return {
        sucesso: false,
        mensagem: 'Chave da API n√£o configurada'
      };
    }

    try {
      const result = await this.model.generateContent('Responda apenas: "Conex√£o OK"');
      const response = await result.response;
      const texto = response.text();

      return {
        sucesso: true,
        mensagem: 'Conex√£o com Gemini AI estabelecida com sucesso!',
        resposta: texto
      };
    } catch (error) {
      return {
        sucesso: false,
        mensagem: `Erro na conex√£o: ${error.message}`
      };
    }
  }

  // M√©todo para verificar se o servi√ßo est√° configurado
  isConfigurado() {
    return this.genAI !== null;
  }
}

// Exportar inst√¢ncia √∫nica (singleton)
const geminiService = new GeminiService();
export default geminiService;