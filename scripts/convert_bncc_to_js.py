"""
Script para converter o arquivo BNCC.md em competenciasBNCC.js
Gera o arquivo JavaScript com todas as 642 competÃªncias organizadas
"""

import re
import json

def parse_bncc_md():
    """LÃª o arquivo BNCC.md e extrai todas as competÃªncias"""
    
    with open('docs/BNCC.md', 'r', encoding='utf-8') as f:
        content = f.read()
    
    competencias = {
        'educacao_infantil_bebes': {'titulo': 'EducaÃ§Ã£o Infantil - BebÃªs (0 a 1a6m)', 'campos_experiencia': {}},
        'educacao_infantil_bem_pequenas': {'titulo': 'EducaÃ§Ã£o Infantil - CrianÃ§as bem pequenas (1a7m a 3a11m)', 'campos_experiencia': {}},
        'educacao_infantil_pequenas': {'titulo': 'EducaÃ§Ã£o Infantil - CrianÃ§as pequenas (4a a 5a11m)', 'campos_experiencia': {}},
        'fundamental_1_ano': {'titulo': 'Ensino Fundamental - 1Âº ano', 'disciplinas': {}},
        'fundamental_2_ano': {'titulo': 'Ensino Fundamental - 2Âº ano', 'disciplinas': {}},
        'fundamental_3_ano': {'titulo': 'Ensino Fundamental - 3Âº ano', 'disciplinas': {}},
        'fundamental_4_ano': {'titulo': 'Ensino Fundamental - 4Âº ano', 'disciplinas': {}},
        'fundamental_5_ano': {'titulo': 'Ensino Fundamental - 5Âº ano', 'disciplinas': {}},
    }
    
    # Regex para extrair competÃªncias no formato: **CÃ“DIGO** - DescriÃ§Ã£o
    pattern = r'\*\*([A-Z0-9]+)\*\*\s*-\s*(.+?)(?=\n\n|\n\*\*|$)'
    
    matches = re.findall(pattern, content, re.DOTALL)
    
    for codigo, descricao in matches:
        descricao = descricao.strip().replace('\n', ' ')
        
        # Classificar por cÃ³digo
        if codigo.startswith('EI01'):
            add_to_ei(competencias['educacao_infantil_bebes'], codigo, descricao)
        elif codigo.startswith('EI02'):
            add_to_ei(competencias['educacao_infantil_bem_pequenas'], codigo, descricao)
        elif codigo.startswith('EI03'):
            add_to_ei(competencias['educacao_infantil_pequenas'], codigo, descricao)
        elif 'LP' in codigo or 'MA' in codigo or 'CI' in codigo or 'GE' in codigo or 'HI' in codigo or 'AR' in codigo or 'EF' in codigo or 'ER' in codigo:
            add_to_fundamental(competencias, codigo, descricao)
    
    return competencias

def add_to_ei(faixa, codigo, descricao):
    """Adiciona competÃªncia Ã  EducaÃ§Ã£o Infantil"""
    # Determinar o campo de experiÃªncia baseado no cÃ³digo
    campo_map = {
        'EO': 'O eu, o outro e o nÃ³s',
        'CG': 'Corpo, gestos e movimentos',
        'TS': 'TraÃ§os, sons, cores e formas',
        'EF': 'Escuta, fala, pensamento e imaginaÃ§Ã£o',
        'ET': 'EspaÃ§os, tempos, quantidades, relaÃ§Ãµes e transformaÃ§Ãµes'
    }
    
    campo_code = codigo[4:6]
    campo = campo_map.get(campo_code, 'Outros')
    
    if campo not in faixa['campos_experiencia']:
        faixa['campos_experiencia'][campo] = []
    
    faixa['campos_experiencia'][campo].append({
        'codigo': codigo,
        'descricao': descricao
    })

def add_to_fundamental(competencias, codigo, descricao):
    """Adiciona habilidade ao Ensino Fundamental"""
    # Extrair disciplina e ano
    disciplina_map = {
        'LP': 'LÃ­ngua Portuguesa',
        'AR': 'Arte',
        'EF': 'EducaÃ§Ã£o FÃ­sica',
        'MA': 'MatemÃ¡tica',
        'CI': 'CiÃªncias',
        'GE': 'Geografia',
        'HI': 'HistÃ³ria',
        'ER': 'Ensino Religioso'
    }
    
    # Extrair ano do cÃ³digo (EF01LP01 -> 01 = 1Âº ano)
    if len(codigo) >= 6:
        disc_code = codigo[4:6]
        ano = codigo[2:4]
        
        disciplina = disciplina_map.get(disc_code, 'Outros')
        
        # Mapear cÃ³digos especiais (EF15LP, EF12LP, EF35LP)
        if ano in ['15', '12', '35']:
            # Adicionar a mÃºltiplos anos
            anos = []
            if ano == '15':
                anos = ['01', '02', '03', '04', '05']
            elif ano == '12':
                anos = ['01', '02']
            elif ano == '35':
                anos = ['03', '04', '05']
            
            for a in anos:
                faixa_key = f'fundamental_{a}_ano'
                if faixa_key in competencias:
                    if disciplina not in competencias[faixa_key]['disciplinas']:
                        competencias[faixa_key]['disciplinas'][disciplina] = []
                    competencias[faixa_key]['disciplinas'][disciplina].append({
                        'codigo': codigo,
                        'descricao': descricao
                    })
        else:
            faixa_key = f'fundamental_{ano}_ano'
            if faixa_key in competencias:
                if disciplina not in competencias[faixa_key]['disciplinas']:
                    competencias[faixa_key]['disciplinas'][disciplina] = []
                competencias[faixa_key]['disciplinas'][disciplina].append({
                    'codigo': codigo,
                    'descricao': descricao
                })

def generate_js_file(competencias):
    """Gera o arquivo JavaScript"""
    
    js_content = """// CompetÃªncias BNCC COMPLETAS - Base Nacional Comum Curricular
// Total: 642 competÃªncias e habilidades
// Gerado automaticamente a partir de BNCC.md
// Ãšltima atualizaÃ§Ã£o: 29/10/2025

export const FAIXAS_ETARIAS = [
  { id: 'educacao_infantil_bebes', label: 'EducaÃ§Ã£o Infantil - BebÃªs (0 a 1a6m)', ordem: 1 },
  { id: 'educacao_infantil_bem_pequenas', label: 'EducaÃ§Ã£o Infantil - CrianÃ§as bem pequenas (1a7m a 3a11m)', ordem: 2 },
  { id: 'educacao_infantil_pequenas', label: 'EducaÃ§Ã£o Infantil - CrianÃ§as pequenas (4a a 5a11m)', ordem: 3 },
  { id: 'fundamental_1_ano', label: 'Ensino Fundamental - 1Âº ano', ordem: 4 },
  { id: 'fundamental_2_ano', label: 'Ensino Fundamental - 2Âº ano', ordem: 5 },
  { id: 'fundamental_3_ano', label: 'Ensino Fundamental - 3Âº ano', ordem: 6 },
  { id: 'fundamental_4_ano', label: 'Ensino Fundamental - 4Âº ano', ordem: 7 },
  { id: 'fundamental_5_ano', label: 'Ensino Fundamental - 5Âº ano', ordem: 8 }
];

// FunÃ§Ã£o auxiliar para obter todas as competÃªncias de forma plana para o Autocomplete
export function getAllCompetencias() {
  const competencias = [];
  
  Object.entries(COMPETENCIAS_BNCC).forEach(([faixaKey, faixaData]) => {
    if (faixaData.campos_experiencia) {
      // EducaÃ§Ã£o Infantil
      Object.entries(faixaData.campos_experiencia).forEach(([campo, lista]) => {
        lista.forEach(comp => {
          competencias.push({
            ...comp,
            faixa: faixaData.titulo,
            campo,
            tipo: 'educacao_infantil'
          });
        });
      });
    } else if (faixaData.disciplinas) {
      // Ensino Fundamental
      Object.entries(faixaData.disciplinas).forEach(([disciplina, lista]) => {
        lista.forEach(comp => {
          competencias.push({
            ...comp,
            faixa: faixaData.titulo,
            disciplina,
            tipo: 'ensino_fundamental'
          });
        });
      });
    }
  });
  
  return competencias;
}

// FunÃ§Ã£o para filtrar competÃªncias por faixa etÃ¡ria
export function getCompetenciasByFaixa(faixaId) {
  const faixa = COMPETENCIAS_BNCC[faixaId];
  if (!faixa) return [];
  
  return getAllCompetencias().filter(comp => 
    comp.faixa === faixa.titulo
  );
}

export const COMPETENCIAS_BNCC = """
    
    # Converter para JSON e depois para JavaScript
    js_obj = json.dumps(competencias, ensure_ascii=False, indent=2)
    
    # Substituir aspas duplas por aspas simples no JavaScript
    js_obj = js_obj.replace('"', "'")
    
    js_content += js_obj + ";\n"
    
    with open('src/app/sala-professor/components/shared/competenciasBNCC.js', 'w', encoding='utf-8') as f:
        f.write(js_content)
    
    print(f"âœ… Arquivo gerado com sucesso!")
    print(f"Total de faixas: {len(competencias)}")
    
    # Contar total de competÃªncias
    total = 0
    for faixa_key, faixa_data in competencias.items():
        if 'campos_experiencia' in faixa_data:
            for campo, lista in faixa_data['campos_experiencia'].items():
                total += len(lista)
        if 'disciplinas' in faixa_data:
            for disc, lista in faixa_data['disciplinas'].items():
                total += len(lista)
    
    print(f"Total de competÃªncias: {total}")

if __name__ == '__main__':
    print("ðŸš€ Iniciando conversÃ£o de BNCC.md para competenciasBNCC.js...")
    competencias = parse_bncc_md()
    generate_js_file(competencias)
    print("âœ¨ ConversÃ£o concluÃ­da!")
